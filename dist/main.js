/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ (() => {

eval("\r\n\r\nlet $todoInput; //miejsce wpisania  zadania przez użytkownika \r\nlet $alertInfo; // info o braku zadań lub konieczośco dodania zadania  \r\nlet $addBtn; // przycisk ADD do dodania nowych elementów do listy\r\nlet $ulList; //lista zadań  tagi <ul></ul> \r\nlet $newTask; //  nowo dodane li , nowe zadanie \r\nlet $popup; //pobrany popup\r\nlet $popupInfo; //alertw popupie, gdy się doda pusty tekst\r\nlet $editedTodo; // edytowany Todo\r\nlet $popupInput; // tekst wpisywany w ionputa w popupie\r\nlet $addPopupBtn; // przycisk zatwierdź w popupie\r\nlet $closeTodoBtn; // przycisk do zamykania popupa\r\nlet $idNumber = 0; // numeracja Id todo-Id nadawana każdemu li - zadaniu\r\nlet $allTasks; // wszystkie li  na liście zadań \r\n\r\n\r\n\r\n\r\nconst main = () => {\r\n    prepareDOMElements();\r\n    prepareDOMEvents();\r\n};\r\n\r\n\r\n// pobieramy nasze elementy: \r\nconst prepareDOMElements = () => {\r\n\r\n    $todoInput = document.querySelector('.todoInput');\r\n    $alertInfo = document.querySelector('.alertInfo');\r\n    $addBtn = document.querySelector('.addBtn');\r\n    $ulList = document.querySelector('.todoList ul');\r\n    $popup = document.querySelector('.popup');\r\n    $popupInfo = document.querySelector('.popupInfo');\r\n    $popupInput = document.querySelector('.popupInput');\r\n    $addPopupBtn = document.querySelector('.accept');\r\n    $closeTodoBtn = document.querySelector('.cancel');\r\n    $allTasks = $ulList.getElementsByTagName('li');  /* odwołanie do \"żywej kolekcji\" !!!!!! zamieszczonej tylko w naszej ulLiście !!!!!!! */\r\n};\r\n\r\n//nadajemy nasłuchiwanie:\r\nconst prepareDOMEvents = () => {\r\n    $addBtn.addEventListener('click', addNewTask);\r\n    $ulList.addEventListener('click', checkClick);\r\n    $closeTodoBtn.addEventListener('click', closePopup);\r\n    $addPopupBtn.addEventListener('click', changeTodo);\r\n    $todoInput.addEventListener('keyup', enterCheck);\r\n};\r\n\r\n/*poniżej funkcja addNewTask tworzaca nowe li i umieszczajaca w nim tekst z inputa  a w przypadku braku tekstu czyli gdy value inPuta jest pustym stringiem  to wyśwetla tekst 'Wpisz treśc zadania1' - czyli dodajemy nowy element tj. li do listy  */\r\n\r\nconst addNewTask = () => {\r\n    if ($todoInput.value !== '') {\r\n        $idNumber++;\r\n        $newTask = document.createElement('li');\r\n        $newTask.innerText = $todoInput.value;\r\n        $newTask.setAttribute('id', `todo-${$idNumber}`);\r\n        $ulList.appendChild($newTask);\r\n\r\n        $todoInput.value = ''\r\n        $alertInfo.innerText = ''\r\n        createToolsArea();\r\n\r\n    } else {\r\n        $alertInfo.innerText = 'Wpisz treśc zadania!';\r\n    }\r\n};\r\n\r\n//sprawdzenie czy użytkownik wcisnął enter\r\nconst enterCheck = () => {\r\n    if (event.keyCode === 13) {\r\n        addNewTask();\r\n    }\r\n};\r\n\r\n\r\n// tworzenie przycisków edycji, usuwania i \"gotowe\", po prawej stronie każdego zadania \r\nconst createToolsArea = () => {\r\n    const toolsPanel = document.createElement('div');\r\n    toolsPanel.classList.add('tools');\r\n    $newTask.appendChild(toolsPanel);\r\n\r\n    const completeBtn = document.createElement('button');\r\n    completeBtn.classList.add('complete');\r\n    completeBtn.innerHTML = '<i class=\"fas fa-check\"></i>';\r\n\r\n    const editBtn = document.createElement('button');\r\n    editBtn.classList.add('edit');\r\n    editBtn.innerText = 'EDIT';\r\n\r\n    const deleteBtn = document.createElement('button');\r\n    deleteBtn.classList.add('delete');\r\n    deleteBtn.innerHTML = '<i class=\"fas fa-times\"></i>';\r\n\r\n    toolsPanel.appendChild(completeBtn);\r\n    toolsPanel.appendChild(editBtn);\r\n    toolsPanel.appendChild(deleteBtn);\r\n\r\n};\r\n\r\n// zarządzanie kiknięciami w przyciski toolsów \r\nconst checkClick = (e) => {\r\n    if (e.target.closest('button').classList.contains('complete')) {\r\n        e.target.closest('li').classList.toggle('completed');\r\n        e.target.closest('button').classList.toggle('completed');\r\n    }\r\n    else if (e.target.closest('button').className === 'edit') {\r\n        editTask(e);\r\n\r\n    } else if (e.target.closest('button').className === 'delete') {\r\n        deleteTask(e);\r\n\r\n    }\r\n\r\n};\r\n\r\n// edycja treści zadania w popupie\r\nconst editTask = (e) => {\r\n    const oldTodo = e.target.closest('li').id;\r\n    $editedTodo = document.getElementById(oldTodo);\r\n    $popupInput.value = $editedTodo.firstChild.textContent;\r\n\r\n    $popup.style.display = 'flex';\r\n};\r\n\r\n// edycja zadania czyli zmiana treści zadania w popupie\r\nconst changeTodo = () => {\r\n    if ($popupInput.value !== '') {\r\n        $editedTodo.firstChild.textContent = $popupInput.value;\r\n        $popup.style.display = 'none';\r\n        $popupInfo.innerText = '';\r\n    } else {\r\n        $popupInfo.innerText = 'Musisz podać jakąś treść zadania!!!';\r\n    };\r\n\r\n};\r\n\r\n\r\n// poniżej zamknięcie popupa - Anuluj\r\nconst closePopup = () => {\r\n    $popup.style.display = 'none'\r\n    $popupInfo.innerText = '';\r\n};\r\n\r\n//poniżej kasowanie zadania  Taska za pomocą krzyżyka \r\n\r\nconst deleteTask = (e) => {\r\n    const deleteTodo = e.target.closest('li');\r\n    deleteTodo.remove();\r\n\r\n    if ($allTasks.length === 0) {\r\n        $alertInfo.innerText = 'Brak jakichkolwiek zadań na liście. ';\r\n    }\r\n\r\n}\r\n\r\n\r\ndocument.addEventListener('DOMContentLoaded', main); /* wywołanie funkcji main dopiero po załadowaniu całej strony */\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://hardtodolist/./index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./index.js"]();
/******/ 	
/******/ })()
;